#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–µ–∫—Ç
"""

import os
import django
from django.core.management import execute_from_command_line
import json
from datetime import datetime, timedelta
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from courses.models import Course, Group, Lesson
from payments.models import Payment
from accounts.models import User

User = get_user_model()

def load_initial_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not User.objects.filter(username='admin').exists():
        admin = User.objects.create_superuser(
            username='admin',
            email='admin@fluencyclub.fun',
            password='admin',
            role='admin',
            first_name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            last_name='–°–∏—Å—Ç–µ–º—ã'
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.username}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers_data = [
        {
            'username': 'teacher1',
            'email': 'teacher1@fluencyclub.fun',
            'password': 'teacher123',
            'role': 'teacher',
            'first_name': '–ò–≤–∞–Ω',
            'last_name': '–ò–≤–∞–Ω–æ–≤',
        },
        {
            'username': 'teacher2',
            'email': 'teacher2@fluencyclub.fun',
            'password': 'teacher123',
            'role': 'teacher',
            'first_name': '–ú–∞—Ä–∏—è',
            'last_name': '–ü–µ—Ç—Ä–æ–≤–∞',
        }
    ]
    
    for teacher_data in teachers:
        if not User.objects.filter(username=teacher_data['username']).exists():
            teacher = User.objects.create_user(**teacher_data)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.username}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    students_data = [
        {
            'username': 'student1',
            'email': 'student1@fluencyclub.fun',
            'password': 'student123',
            'role': 'student',
            'first_name': '–ê–ª–µ–∫—Å–µ–π',
            'last_name': '–°–º–∏—Ä–Ω–æ–≤',
            'has_studied_language': False
        },
        {
            'username': 'student2',
            'email': 'student2@fluencyclub.fun',
            'password': 'student123',
            'role': 'student',
            'first_name': '–ï–ª–µ–Ω–∞',
            'last_name': '–ö–æ–∑–ª–æ–≤–∞',
            'has_studied_language': True
        },
        {
            'username': 'student3',
            'email': 'student3@fluencyclub.fun',
            'password': 'student123',
            'role': 'student',
            'first_name': '–î–º–∏—Ç—Ä–∏–π',
            'last_name': '–í–æ–ª–∫–æ–≤',
            'has_studied_language': True
        }
    ]
    
    for student_data in students:
        if not User.objects.filter(username=student_data['username']).exists():
            student = User.objects.create_user(**student_data)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student.username}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    course_data = [
        {
            'title': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
            'description': '–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
            'price': 1500.00,
            'duration_hours': 40,
            'level': 'beginner',
            'language': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'is_active': True
        },
        {
            'title': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è',
            'description': '–ö—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –∑–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ',
            'price': 2000.00,
            'duration_hours': 50,
            'level': 'intermediate',
            'language': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'is_active': True
        },
        {
            'title': '–ë–∏–∑–Ω–µ—Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'description': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è',
            'price': 2500.00,
            'duration_hours': 30,
            'level': 'advanced',
            'language': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'is_active': True
        }
    ]
    
    for course_data in courses:
        course, created = Course.objects.get_or_create(
            title=course_data['title'],
            defaults=course_data
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫—É—Ä—Å: {course.title}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
    teachers = User.objects.filter(role='teacher')
    students = User.objects.filter(role='student')
    
    if teachers.exists() and students.exists():
        courses = Course.objects.all()
        
        for i, course in enumerate(courses):
            teacher = teachers[i % len(teachers)]
            
            group_data = {
                'title': f'–ì—Ä—É–ø–ø–∞ {course.get_level_display()} {i+1}',
                'course': course,
                'teacher': teacher,
                'start_date': timezone.now().date(),
                'end_date': (timezone.now() + timedelta(days=90)).date(),
                'is_active': True
            }
            
            group, created = Group.objects.get_or_create(
                title=group_data['title'],
                defaults=group_data
            )
            
            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É
                group_students = list(students[:3])  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—É–¥–µ–Ω—Ç–∞
                group.students.set(group_students)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.title} —Å {len(group_students)} —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
    groups = Group.objects.filter(is_active=True)
    
    for group in groups:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π
        for i in range(3):
            start_time = timezone.now() + timedelta(days=i*7, hours=10)
            end_time = start_time + timedelta(hours=1)
            
            lesson_data = {
                'group': group,
                'teacher': group.teacher,
                'title': f'–ó–∞–Ω—è—Ç–∏–µ {i+1}: {group.course.title}',
                'description': f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è {i+1} –∫—É—Ä—Å–∞ {group.course.title}',
                'lesson_type': 'group',
                'start_time': start_time,
                'end_time': end_time,
                'duration_minutes': 60
            }
            
            lesson, created = Lesson.objects.get_or_create(
                title=lesson_data['title'],
                start_time=lesson_data['start_time'],
                defaults=lesson_data
            )
            
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {lesson.title}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    if students.exists() and courses.exists():
        for i, student in enumerate(students[:2]):  # –ü–µ—Ä–≤—ã–µ 2 —Å—Ç—É–¥–µ–Ω—Ç–∞
            course = courses[i % len(courses)]
            
            payment_data = {
                'student': student,
                'course': course,
                'amount': course.price,
                'currency': 'RUB',
                'status': 'paid',
                'payment_method': 'card',
                'description': f'–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞: {course.title}'
            }
            
            payment, created = Payment.objects.get_or_create(
                student=student,
                course=course,
                defaults=payment_data
            )
            
            if created:
                payment.paid_at = timezone.now()
                payment.save()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {student.username} - {course.title}")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

if __name__ == '__main__':
    load_initial_data()